extends java

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet with "builder" b
public ${1:Builder} set${2:Name}(${3:String} `!p snip.rv = mixedCase(t[2])`) {
	this.`!p snip.rv = mixedCase(t[2])` = `!p snip.rv = mixedCase(t[2])`;
	return this;
}
endsnippet

snippet /pojo\((((\w|[<>\[\],\.])+\s+\w+(\s*,\s*)?)+)\)/ "generate pojo with builder" br
import lombok.EqualsAndHashCode;
import lombok.ToString;

// `!p snip.rv = match.group(0)`
@EqualsAndHashCode
@ToString
public class ${1:`!p snip.rv = snip.basename or "Name"`} {
`!p
def is_list_builder(type):
	return re.search(r'List\<[^\.]+\.Builder\>', type) is not None

def strip_builder(type):
	match = re.search(r'List\<([^\.]+\.Builder)\>', type)
	return "List<" + match.group(1)[:-8] + ">"

# fields
vars = [re.split("\s+", var) for var in re.split("\s*,\s*", match.group(1))]
snip.shift()
for (type, name) in vars:
	if is_list_builder(type):
		snip.rv += "\n" + snip.mkline("private final " + strip_builder(type) + " " + name + ";")
	else:
		snip.rv += "\n" + snip.mkline("private final " + type + " " + name + ";")
`

	public static Builder newBuilder() {
		return new Builder();
	}

	public Builder toBuilder() {
		return new Builder(this);
	}

	private $1(Builder builder) {`!p
# constructor
snip.shift(2)
for (type, name) in vars:
	if is_list_builder(type):
		snip.rv += "\n" + snip.mkline("this." + name + " = builder." + name +
		".stream().map(x -> x.build()).collect(Collectors.toList);")
	else:
		snip.rv += "\n" + snip.mkline("this." + name + " = builder." + name + ";")
`
	}`!p
# getters
snip.shift()
for (type, name) in vars:
	snip.rv += "\n"
	if is_list_builder(type):
		snip.rv += "\n" + snip.mkline("public " + strip_builder(type) + " get" + camel(name) + "() {")
	else:
		snip.rv += "\n" + snip.mkline("public " + type + " get" + camel(name) + "() {")
	snip.shift()
	snip.rv += "\n" + snip.mkline("return " + name + ";")
	snip.unshift()
	snip.rv += "\n" + snip.mkline("}")
`

	public static class Builder {
`!p
def is_list(type):
	return type.startswith("List");

def strip_plural(name):
	if name.endswith("s"):
		return name[:-1]
	else:
		return name

def strip_list(type):
	match = re.search(r'List\<([^\>]+)\>', type)
	return match.group(1)

# fields
snip.shift(2)
for (type, name) in vars:
	if is_list(type):
		snip.rv += "\n" + snip.mkline("private " + type + " " + name + " = new ArrayList<>();")
	else:
		snip.rv += "\n" + snip.mkline("private " + type + " " + name + ";")
`

		private Builder() {
		}

		private Builder($1 object) {`!p
# to builder
snip.shift(3)
for (type, name) in vars:
	if is_list_builder(type):
		snip.rv += "\n" + snip.mkline("this." + name + " = " + "object." + name +
		".stream().map(x -> x.toBuilder()).collect(Collectors.toList);")
	else:
		snip.rv += "\n" + snip.mkline("this." + name + " = " + "object." + name + ";")
`
		}`!p
# setters
snip.shift(2)
for (type, name) in vars:
	if is_list(type):
		singular = strip_plural(name);
		singular_type = strip_list(type)
		snip.rv += "\n"
		snip.rv += "\n" + snip.mkline("public Builder add" + camel(singular) + "(" + singular_type + " " + singular + ") {")
		snip.shift()
		snip.rv += "\n" + snip.mkline("this." + name + ".add(" + singular + ");")
		snip.rv += "\n" + snip.mkline("return this;")
		snip.unshift()
		snip.rv += "\n" + snip.mkline("}")
		snip.rv += "\n"
		snip.rv += "\n" + snip.mkline("public Builder clear" + camel(name) + "() {")
		snip.shift()
		snip.rv += "\n" + snip.mkline("this." + name + ".clear();")
		snip.rv += "\n" + snip.mkline("return this;")
		snip.unshift()
		snip.rv += "\n" + snip.mkline("}")
	else:
		snip.rv += "\n"
		snip.rv += "\n" + snip.mkline("public Builder set" + camel(name) + "(" + type + " " + name + ") {")
		snip.shift()
		snip.rv += "\n" + snip.mkline("this." + name + " = " + name + ";")
		snip.rv += "\n" + snip.mkline("return this;")
		snip.unshift()
		snip.rv += "\n" + snip.mkline("}")
	snip.rv += "\n"
	snip.rv += "\n" + snip.mkline("public " + type + " get" + camel(name) + "() {")
	snip.shift()
	snip.rv += "\n" + snip.mkline("return " + name + ";")
	snip.unshift()
	snip.rv += "\n" + snip.mkline("}")
`

		public $1 build() {
			return new $1(this);
		}
	}
}$0
endsnippet

snippet /builder\((((\w|[<>\[\]])+\s+\w+(\s*,\s*)?)+)\)/ "generate builder" br
public static class ${1:Builder} {
`!p
# fields
vars = [re.split("\s+", var) for var in re.split("\s*,\s*", match.group(1))]
snip.shift()
for (type, name) in vars:
	snip.rv += "\n" + snip.mkline("private final " + type + " " + name + ";")
`

	public $1() {
	}`!p
# setters
snip.shift()
for (type, name) in vars:
	snip.rv += "\n"
	snip.rv += "\n" + snip.mkline("public Builder set" + camel(name) + "(" + type + " " + name + ") {")
	snip.shift()
	snip.rv += "\n" + snip.mkline("this." + name + " = " + name + ";")
	snip.rv += "\n" + snip.mkline("return this;")
	snip.unshift()
	snip.rv += "\n" + snip.mkline("}")
`

	public ${2:ValueClass} build() {
		return new $2(this);
	}

}$0
endsnippet
